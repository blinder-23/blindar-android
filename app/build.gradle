plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'jacoco'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
}

jacoco {
    toolVersion = '0.8.7'
}

task {
    useJUnitPlatform()
    jacoco.includeNoLocationClassses = true
}

tasks.withType(Test.class).configureEach {
    it.useJUnitPlatform()
    jacoco {
        excludes = ["*"]
    }
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {
    reports {
        html.enabled(true)
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "$buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "$projectDir/src/main/java"

    sourceDirectories.from = files([mainSrc])
    classDirectories.from = files([debugTree])
    executionData.from = fileTree(dir: buildDir, includes: [
            'outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec',
            'outputs/code_coverage/debugAndroidTest/connected/Pixel_4_API_31(AVD) - 12/*.ec'
    ])
}

configurations.all {
    resolutionStrategy {
        eachDependency { details ->
            if ('org.jacoco' == details.requested.group) {
                details.useVersion "0.8.7"
            }
        }
    }
}

android {
    compileSdk 33

    defaultConfig {
        applicationId "com.practice.hanbitlunch"
        minSdk 26
        targetSdk 33
        versionCode 1
        versionName '1.2.3-beta01'
        signingConfig signingConfigs.debug

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }
    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
        animationsDisabled true
        unitTests.all {
            jacoco {
                excludes = ['jdk.internal.*']
            }
        }
        unitTests {
            returnDefaultValues = true
            includeAndroidResources = true
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            testCoverageEnabled true
            debuggable true
            applicationIdSuffix ".debug"
        }
        benchmark {
            initWith buildTypes.release
            signingConfig signingConfigs.debug
            matchingFallbacks = ['release']
            debuggable false
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion composeLibs.versions.compiler.get()
    }
    packagingOptions {
        resources {
            excludes += ['/META-INF/{AL2.0,LGPL2.1}', 'META-INF/AL2.0', 'META-INF/LGPL2.1']
        }
    }
    namespace 'com.practice.hanbitlunch'
}

dependencies {
    // mwy3055 library
    implementation libs.hsk.ktx
    implementation libs.violet.dreams.core
    implementation libs.violet.dreams.ui

    // Kotlin immutable collections
    implementation kotlinLibs.collections.immutable

    // Module dependency
    implementation project(path: ':preferences')
    implementation project(path: ':database')
    implementation project(path: ':database:di')
    implementation project(path: ':domain')
    implementation project(path: ':domain:di')
    implementation project(path: ':work')
    implementation project(path: ':server')
    implementation project(path: ':server:di')

    // KTX libraries
    implementation androidXLibs.core.ktx
    implementation androidXLibs.collection.ktx
    implementation androidXLibs.palette.ktx

    // AndroidX lifecycles
    implementation androidXLibs.bundles.lifecycle

    // Compose
    implementation platform(composeLibs.bom)
    androidTestImplementation platform(composeLibs.bom)
    implementation "androidx.compose.ui:ui"
    // Tooling support (Previews, etc.)
    implementation "androidx.compose.ui:ui-tooling"
    implementation "androidx.compose.ui:ui-tooling-preview"
    // Foundation (Border, Background, Box, Image, Scroll, shapes, animations, etc.)
    implementation "androidx.compose.foundation:foundation"
    // Material Design
    implementation "androidx.compose.material:material"
    // Material design icons
    implementation "androidx.compose.material:material-icons-core"
    implementation "androidx.compose.material:material-icons-extended"
    // Integration with activities
    implementation 'androidx.activity:activity-compose'
    // Integration with ViewModels
    implementation androidXLibs.lifecycle.viewmodel.compose
    // Integration with Hilt
    implementation androidXLibs.hilt.navigation.compose
    // UI Tests
    androidTestImplementation "androidx.compose.ui:ui-test-junit4"
    // Integration with Paging
    implementation androidXLibs.paging.compose
    // Material 3
    implementation "androidx.compose.material3:material3"
    implementation "androidx.compose.material3:material3-window-size-class"

    // Splash screen
    implementation androidXLibs.core.splashscreen

    // Baseline Profile
    implementation androidXLibs.profileinstaller

    // Preferences DataStore
    implementation androidXLibs.datastore.preferences

    // Android StartUp
    implementation androidXLibs.startup.runtime

    // AndroidX WorkManager
    implementation androidXLibs.work.runtime.ktx
    androidTestImplementation androidXLibs.work.testing
    // Hilt with Work
    implementation androidXLibs.hilt.work

    // Hilt
    implementation androidXLibs.hilt.android
    kapt androidXLibs.hilt.compiler
    kapt androidXLibs.hilt.compiler.androidx

    // Unit Test
    testImplementation testLibs.junit.jupiter.api
    testRuntimeOnly testLibs.junit.jupiter.engine
    testRuntimeOnly testLibs.junit.vintage.engine
    testImplementation testLibs.assertj
    androidTestUtil testLibs.orchestrator

    // Instrumented Test
    androidTestImplementation instTestLibs.junit
    androidTestImplementation instTestLibs.espresso.core
    androidTestImplementation "androidx.compose.ui:ui-test-junit4"

    // Accompanist
    implementation libs.bundles.accompanist

    // Kotlin Coroutines
    implementation kotlinLibs.bundles.coroutines
    testImplementation kotlinLibs.coroutines.test
}