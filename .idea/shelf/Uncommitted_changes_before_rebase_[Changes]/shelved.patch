Index: server/src/main/java/com/example/server/meal/RemoteMealDataSourceImpl.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.server.meal\r\n\r\nimport com.example.server.meal.api.MealApi\r\nimport com.example.server.meal.pojo.MealResponse\r\n\r\nclass RemoteMealDataSourceImpl(private val api: MealApi) : RemoteMealDataSource {\r\n    override suspend fun getMeals(year: Int, month: Int): MealResponse {\r\n        return api.getMeals(year, month)\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/src/main/java/com/example/server/meal/RemoteMealDataSourceImpl.kt b/server/src/main/java/com/example/server/meal/RemoteMealDataSourceImpl.kt
--- a/server/src/main/java/com/example/server/meal/RemoteMealDataSourceImpl.kt	(revision 49fa72b1c5938e6d5754a6ed1352fa28bba41eb0)
+++ b/server/src/main/java/com/example/server/meal/RemoteMealDataSourceImpl.kt	(date 1664879212258)
@@ -1,10 +1,13 @@
 package com.example.server.meal
 
+import android.util.Log
 import com.example.server.meal.api.MealApi
 import com.example.server.meal.pojo.MealResponse
 
 class RemoteMealDataSourceImpl(private val api: MealApi) : RemoteMealDataSource {
     override suspend fun getMeals(year: Int, month: Int): MealResponse {
-        return api.getMeals(year, month)
+        return api.getMeals(year, month).apply {
+            Log.d("RemoteMealDataSourceImpl", "meal $year $month: ${response.map { it.ymd }}")
+        }
     }
 }
\ No newline at end of file
Index: server/src/main/java/com/example/server/meal/RemoteMealRepository.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.server.meal\r\n\r\nimport com.example.server.meal.pojo.MealResponse\r\n\r\nclass RemoteMealRepository(private val remote: RemoteMealDataSource) {\r\n    suspend fun getMeals(year: Int, month: Int): MealResponse {\r\n        return try {\r\n            remote.getMeals(year, month)\r\n        } catch (e: Exception) {\r\n            throw RemoteMealRepositoryException(e.message)\r\n        }\r\n    }\r\n}\r\n\r\nclass RemoteMealRepositoryException(override val message: String?) : Exception(message)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/src/main/java/com/example/server/meal/RemoteMealRepository.kt b/server/src/main/java/com/example/server/meal/RemoteMealRepository.kt
--- a/server/src/main/java/com/example/server/meal/RemoteMealRepository.kt	(revision 49fa72b1c5938e6d5754a6ed1352fa28bba41eb0)
+++ b/server/src/main/java/com/example/server/meal/RemoteMealRepository.kt	(date 1664879212233)
@@ -1,11 +1,14 @@
 package com.example.server.meal
 
+import android.util.Log
 import com.example.server.meal.pojo.MealResponse
 
 class RemoteMealRepository(private val remote: RemoteMealDataSource) {
     suspend fun getMeals(year: Int, month: Int): MealResponse {
         return try {
-            remote.getMeals(year, month)
+            remote.getMeals(year, month).apply {
+                Log.d("RemoteMealRepository", "meal $year $month: ${response.size}")
+            }
         } catch (e: Exception) {
             throw RemoteMealRepositoryException(e.message)
         }
Index: work/src/main/java/com/example/work/FetchRemoteMealWorker.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.work\r\n\r\nimport android.content.Context\r\nimport android.util.Log\r\nimport androidx.hilt.work.HiltWorker\r\nimport androidx.work.CoroutineWorker\r\nimport androidx.work.ExistingPeriodicWorkPolicy\r\nimport androidx.work.PeriodicWorkRequestBuilder\r\nimport androidx.work.WorkManager\r\nimport androidx.work.WorkerParameters\r\nimport com.example.domain.combine.toMealEntity\r\nimport com.example.server.meal.RemoteMealRepository\r\nimport com.practice.database.meal.MealRepository\r\nimport com.practice.database.meal.entity.MealEntity\r\nimport dagger.assisted.Assisted\r\nimport dagger.assisted.AssistedInject\r\nimport java.time.LocalDate\r\nimport java.util.concurrent.TimeUnit\r\n\r\n@HiltWorker\r\nclass FetchRemoteMealWorker @AssistedInject constructor(\r\n    @Assisted context: Context,\r\n    @Assisted workerParams: WorkerParameters,\r\n    private val localRepository: MealRepository,\r\n    private val remoteRepository: RemoteMealRepository\r\n) : CoroutineWorker(context, workerParams) {\r\n\r\n    override suspend fun doWork(): Result {\r\n        val result = fetchRemoteMeals()\r\n        Log.d(\"FetchRemoteMealWorker\", \"finished!\")\r\n        return result\r\n    }\r\n\r\n    private suspend fun fetchRemoteMeals(): Result {\r\n        val now = LocalDate.now()\r\n        val currentYear = now.year\r\n        val currentMonth = now.monthValue\r\n        (currentYear downTo currentYear - 2).forEach { year ->\r\n            (0 until 12).forEach { months ->\r\n                tryFetchAndStoreMeals(year, (currentMonth + months - 1) % 12 + 1)\r\n            }\r\n        }\r\n        return Result.success()\r\n    }\r\n\r\n    private suspend fun tryFetchAndStoreMeals(year: Int, month: Int) {\r\n        try {\r\n            fetchAndStoreMeals(year, month)\r\n        } catch (e: Exception) {\r\n            handleException(e, year, month)\r\n        }\r\n    }\r\n\r\n    private suspend fun fetchAndStoreMeals(year: Int, month: Int) {\r\n        val meals = fetchMeals(year, month)\r\n        storeMeals(meals)\r\n    }\r\n\r\n    private suspend fun fetchMeals(year: Int, month: Int): List<MealEntity> =\r\n        remoteRepository.getMeals(year, month).response.map { it.toMealEntity() }\r\n\r\n    private suspend fun storeMeals(meals: List<MealEntity>) {\r\n        localRepository.insertMeals(meals)\r\n    }\r\n\r\n    private fun handleException(e: Exception, year: Int, month: Int): Result {\r\n        Log.e(\"FetchRemoteMealWorker\", \"$year, $month has an exception: ${e.message}\")\r\n        return Result.failure()\r\n    }\r\n}\r\n\r\nconst val fetchRemoteMealWorkTag = \"fetch_remote_meal_work\"\r\n\r\nfun setPeriodicFetchMealWork(workManager: WorkManager) {\r\n    val periodicWork = PeriodicWorkRequestBuilder<FetchRemoteMealWorker>(1, TimeUnit.DAYS)\r\n        .addTag(fetchRemoteMealWorkTag)\r\n        .build()\r\n    workManager.enqueueUniquePeriodicWork(\r\n        fetchRemoteMealWorkTag,\r\n        ExistingPeriodicWorkPolicy.KEEP,\r\n        periodicWork\r\n    )\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/work/src/main/java/com/example/work/FetchRemoteMealWorker.kt b/work/src/main/java/com/example/work/FetchRemoteMealWorker.kt
--- a/work/src/main/java/com/example/work/FetchRemoteMealWorker.kt	(revision 49fa72b1c5938e6d5754a6ed1352fa28bba41eb0)
+++ b/work/src/main/java/com/example/work/FetchRemoteMealWorker.kt	(date 1664879212263)
@@ -57,7 +57,9 @@
     }
 
     private suspend fun fetchMeals(year: Int, month: Int): List<MealEntity> =
-        remoteRepository.getMeals(year, month).response.map { it.toMealEntity() }
+        remoteRepository.getMeals(year, month).response.map { it.toMealEntity() }.apply {
+            Log.d("FetchRemoteMealWorker", "meal $year $month: $size")
+        }
 
     private suspend fun storeMeals(meals: List<MealEntity>) {
         localRepository.insertMeals(meals)
